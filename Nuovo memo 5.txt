Poi le fai riassumere, no, le fai trascrivere, la trascrizione la fai riassumere, fatta, non necessariamente, farla con Circleback sì, ma poi fattela tipo da solo anche dicendo nei AI tipo estrai tipo le nozioni che, cioè capito, gli dai un prompt dove gli dici estrai questo tipo di informazioni perché è una lezione, no? Allora, cosa dobbiamo fare? Per adesso noi dobbiamo fare semplicemente un setup, però nel fare questo setup io ti spiego cosa sta succedendo, ok? Tu mi dirai, ma a me non me ne frega un cazzo, porco di... Poi, innanzitutto non mi spieghi... Signore, calma... Quindi, può anche non interessarti, però sono cose che, nozionistiche, che poi se uno ti parla, ti dice queste cose, tu devi sapere cosa ti sta dicendo, no? Anche se poi, una volta fatto, quasi non ci pensi più, con l'intelligenza artificiale non ci devine, però devi sapere che cazzo stanno dicendo, ok? Questo qui, Cursor, è un code editor, come un documento, cioè Microsoft Word o Microsoft Excel, Excel è per editare dati strutturati, tabelle, Word è per editare testo, Cursor, ad esempio, è per editare codice. Overleaf, LaTeX... Quello non è codice. No, no, ti dico come... Ah, sì, come loro, che sono degli editor di un certo tipo di linguaggio. Ok. Excel, XLS, Word, TXT, che è testo, cioè quel tipo di file, LaTeX, punto LaTeX, credo che sia, adesso non mi ricordo, ognuno ha un suo tipo di formato che ti permette di editare, questo ti permette di editare codice. Il codice sono dei formati particolari, ad esempio, il codice di Python, che è quello da cui partiremo, è .py, sono documenti, tu sai che tutti questi documenti hanno un punto, no? Questo punto va a stabilire... Quello è tipo JPEG o JPEG. Bravissimo, bravissimo, esattamente quello. CSV, no? Ok. Questo, DOCS. Cosa ci dice, porco? Cosa ci dice il punto alla fine? Ci dice il formato del dato, perché il dato è tutto codice binario, no? In verità, qui siamo già a un livello sopra il codice binario, è tutto carattere, sai che non lo so, credo UTF-8, comunque, cioè tutti dei caratteri, quindi caratteri che sono questi, no? Con degli spazi, con dei tab, così, però il computer deve... Non so se ti ricordi qual è il termine per interpretare questi caratteri a livello di un computer. Parsare. Bravissimo. Il computer deve parsare, cioè interpretare queste cose, no? In un'immagine, quei numerini del cazzo saranno diversi da un file testo, sei d'accordo? Se io interpretassi un'immagine come file testo, ok, riuscirebbero un sacco di numeri e basta, cioè non vedrei niente. Stessa cosa un file testo, se gli dico punto pnc, mi fa una porca madonna, perché che cazzo stai dicendo, no? Stessa cosa tutto csv, un testo, non ha senso, eccetera, eccetera, eccetera, ok? Però csv, come vedremo fra poco, com sta per c, tu sai cosa sta per csv? Perfetto. Comma separated value. Ah, ok. Sì, perché sono tutti in riga separate. E se, adesso ti faccio un, vabbè, poi ne apriremo uno insieme e ti faccio vedere che è proprio così, anzi no, ti faccio vedere il mio computer. Qui c'è la banca dati. È un formato di dato, guarda, tutti questi sono tutti dati, questi sono tutti formati di testo. Come vedi? Vedi che ho la virgola così? Sì, sì. Se io invece vado su un punto json, questo è un punto json. Json è l'app, giusto? No, adesso arriviamo a tutto, cioè comunque no, è un formato, però non volevo, ti sto facendo un piccolo spoiler, arriveremo a parlare anche di json, però vedi che è diverso, no? Questa è rappresentata dai dati, ma l'hai visto che rispetto al csv li rappresenta in modo diverso rispetto a un csv normale. Comma separated value. Esatto. Json non lo sai ancora. Lo scopriremo. Però sai che è un altro file, abbiamo già detto docs, txt, abbiamo detto un po' di file, no? Alcuni li conosci già. Questo è un txt ad esempio. Ci sono dei file particolari che sono i file che tengono dentro codice. Questi file qua hanno una desinenza, cioè un suffisso, punto, qualcosa, e quel qualcosa solitamente indica il linguaggio di programmazione. Tu per adesso imparerai .py, e quindi python. Poi imparerai anche ipynb, che sono dei documenti di python, però un po' particolari, e andremo a vedere perché. Farai tanto ipynb anche, però adesso .python, no? Questa roba qua ti permette di guardare i file .python in maniera più facile, no? Vedi che qui sono già tutti colorati, no? Ti ricordi ieri che ti dicevo funzione, metodo, classe, e tu dici no, non ho mai sentito questi termini? Sì. Ok. Se questo fosse come un testo normale e fosse tutto bianco, capirei un cazzo, no? Mentre il fatto che siano colorati, io so che le variabili sono tutte azzurre. So che le classi sono tutte verdi. Classi e moduli sono verdi. So che le funzioni sono gialle. E so che i tipi sono a loro volta verdi, perché in realtà questi sono classi. No, vedi, sono classi, classi. Non devi sapere cosa sono, giusto per capire che sono colori diversi. Ho già visto qualche pari introduttive. So che le stringhe sono questo rosso strano. E so che none è questo blu particolare, come tutti gli operatori. Gli operatori sono tutti blu. Ah, no, no, non è vero. Vabbè, alcuni operatori sono blu. Operatori logici sono blu, mentre operatori funzionali sono questo rosa qua. Quindi try, await. Però, arriveremo a parlare di tutte queste cose qua. Però, per farti capire, vedi che lo leggo e è più facile da leggere. Questo è quello che serve un code editor. Serve a colorarti le cose per farti leggere. C'è meglio uno. Questa è la prima funzione che fa un code editor. Seconda funzione. Un python che avevo scaricato era tutto bianco e nero. Eh, bravissimo. Non si capisce un cazzo. Non si capisce un cazzo, perché non è un... Cioè, devi metterlo dentro un code editor. Qui invece è molto più chiaro. Ma guarda un'altra cosa. Vedi che non c'è più... Che suggerisce? No, no, è diventato grigio. Perché? Perché dice guarda che in questo modulo qua non c'è questa classe. Oppure... Mi crea queste cose qua, no? Giallo. Vuol dire che... Guarda che questa... Non so che cazzo voglia dire questa roba. Oppure, ancora peggio. Eh, qui è solo un pochino rosso. Però, faccio un esempio di rosso più grave. Spacchiamo il nostro sito. Eh, questo code editor è un po' lento. Vedi che si è fatto questo rosso. Volevo farlo più rosso, però... Cioè, questo rosso... Vedi che qui ti dice il file è rotto. Questa roba qua non ha senso. È una sintassi che non funziona. E te lo sta dicendo che... Cioè, non fa il testo. Cioè... Non fa il... Così, no? Come fa a saperlo? Perché c'è questo software che ti analizza il codice. Dice che no, allora questa è una funzione. Perché come è scritta questa qui sarà una funzione. Ehm... Questa qui è un codice rotto. Perché per come io devo passare il testo so che qui non può finire così. Ok. Ok. Questo si chiama lo code editor. Ok? Il code editor più famoso storicamente... Eh, ci sono stati tante generazioni di code editor. Si programma dagli anni 60, quindi... Ma Python è nato negli anni 60. Python non è un code editor. No, no, no. Cioè, il linguaggio Python... Python è nato negli anni 90 o fino 80. O fino 80 o negli anni 90. Però c'erano altri linguaggi. Cioè, nel senso... Tutti i linguaggi vengono sempre fatti all'interno di un code editor. Perché è molto più comodo. Adesso forse non è dagli anni 60 che esistono. Fai dagli anni 80 o 90 che esistono questi code editor. Però ci sono state diverse generazioni. L'ultima generazione, prima di Cursor, si chiama VS Code. Ok? Che è... Questo qua, vedi che io ce l'ho? Ok, che ho già utilizzato. Ok. Adesso lo apro e vedrai una cosa particolare. Ovvero che... Cazzo! Fammi aprire... Fammi aprire... Così, via. Anzi, ho scritto male. Cazzo, è identico. È molto, molto, molto simile, no? Lo vedi? Cioè, cazzo, è la stessa cosa. Allora, Cursor che cazzo... Cursor è un cosiddetto fork di VS Code. Adesso andremo a spiegare, perché abbiamo scaricato GitHub, proprio perché adesso ti spiegherò anche le basi di come funziona il codice, come la gente il programma, eccetera. Hai sentito? Aspetta che mi metto più vicino. Ho detto che VS Code è un fork... Cioè, Cursor è un fork di VS Code. Quindi vuol dire che loro, per semplificare per adesso, hanno copiato tutto il codice che c'era qua, tutto il codice di VS Code, perché VS Code è un cosiddetto open source, che vuol dire che il codice è pubblico online, e su quello hanno costruito una nuova versione. Una nuova versione potenziata dall'AI. Quindi il front-end è identico, però con dentro un AI che ti aiuta molto di più. Quindi, mentre qua se io mi metto a scrivere... Print... Also... Cioè, un po' sì mi scrive, però qua mi scrive molto di più. A parte che faccio così e gli detto le cose, ma poi soprattutto se io voglio... Cioè, adesso non riesco a fartelo vedere perché dovrei fare qualcosa. Però poi lo vedremo. Cioè, è molto più avanzata la funzionalità di AI. Ok? E... Tornando a noi, quindi questo è il Code Editor. Io ti sto facendo una, diciamo, una lezione, tra virgolette, che non necessariamente parte dall'ABC della programma. Cioè, è come se fosse una cosa atemporale, di informazioni che ti sto dando, semplicemente perché secondo me quello che farò io è ogni volta che facciamo qualcosa io ti spiego come funziona quella cosa. Non perché necessariamente se tu facessi una laurea in informatica partiresti da queste cose, non sono necessariamente le basi. Questa è già roba anche un po' avanzata, ma sti cazzi. Perché io ti spiego sempre tutto, poi tu lo apprendi, registri, lo salvi, poi ti tornerà utile. Quindi tu quello che capisci, capisci. Fammi domande se ti sto dicendo delle parole che non capisci o cosa del genere. In ogni caso, fino a qua tutto chiaro con i Code Editor? Ci sono diversi tipi di file, di testo. Questo qui serve molto per fare le cose di programmazione. Cursor è particolarmente bravo perché ti aiuta a programmare con l'AI. Ok? Cosa abbiamo fatto poi? GitHub. Adesso, cioè, ti ho spiegato brevemente Cursor, adesso dobbiamo aprirci GitHub. GitHub è un posto dove condividere e salvare codice online. Ok. Perché tu dici che devo salvare codice online? Io ho le mie cartelle, guarda, c'ho la Nato, IAI, Tirocinio, beh, cioè, è una serie di cose che cazzo ti serve salvare online. Scusa, se stai lavorando con un'altra persona, come fai a condividere il codice? Le mandi su WhatsApp? Google Drive. Bravissimo. È come un Google Drive, però un po' più avanzato. Cioè, un Google Drive mondiale, ovviamente anche le cartelle private, però anche con tantissime cartelle pubbliche, per il codice. Però bravissimo, esattamente quello. E soprattutto, tieni conto anche di questa cosa, di codice, c'è molta più necessità di condividere codice rispetto a condividere file su Google Drive. Quindi, in realtà, tantissima... quando si dice open source, open source, è tutto salvato su GitHub. Cioè, GitHub è la repo dove viene salvato tutto il codice del mondo. Ok? Esistono solo loro? No. È come dire, no, il McDonald's, certo che esiste anche, però, di base tutti usano GitHub, cioè, c'è quasi un monopolio. Quindi, di base tutti hanno questa repo di... ma tipo, credo che l'avessero fatto sono tipo cento triliardi di righe di codice, è una roba senza senso. È bella però questa cosa, la condivisione quasi totale di quello che... del codice che uno fa. Tanto. Non tutto. Tipo, Osteria è chiusa. Però ci sono cose, a parte quello che noi sviluppiamo, che è open source, tantissima... cioè, tutti i DevTools, tutti gli strumenti che poi utilizzano i programmatori per poi costruire altre cose sono open source, i modelli di intelligenza artificiale sono open source, c'è tanta roba che tu puoi vedere, studiare e utilizzare con roba open source. Poi, chiaro, tu mi dici Google Maps è open source? Cazzo, c'è nel senso te lo faccio pagare, te lo faccio pagare anche tanto. Lo scraper di Airbnb è open source? No, cioè, dipende. Soprattutto il codice madre delle società non è open source, sono più... cioè, la comunità dei programmatori è una comunità molto indie, quindi è molto per questa cosa... Sì, è molto. Sì, esatto, tantissimo, perché c'è molto questo clima. Devi anche considerare che oltre ad esserci un clima quindi culturale di questo tipo, è anche per la natura stessa del codice che tu dici, una volta che io ho fatto una funzione che fa una cosa, è replicabile non soltanto nel mio codice infinite volte, ma anche nel codice degli altri infinite volte. Quindi, per questo che noi... cioè, noi adesso, oggigiorno, siamo arrivati in intelligenza artificiale, codice su codice su codice su codice su codice su codice su codice su codice su codice su codice, cioè, l'applicazione qua, questa cosa che vedi qui sullo schermo, parte da della gente 60 anni fa che scriveva le prime righe di codice che permettevano al computer di, non lo so, salvare dei dati su un file, no? Che per noi sono una cazzata e che adesso scrivi, ci metto, addirittura io adesso, per dire al computer, salva dei dati sul file, dico, cioè, oggigiorno, un tempo, c'erano mesi di lavoro per salvare, per creare l'algoritmo che riuscisse a salvare dei dati dalla cache al drive, alla memoria. Adesso io faccio così, crea un file, inseriscici dei dati, testo a caso, scrivi pure tu, e salva il file. Salvalo come, vedi che ho messo .txt? Ho appena creato un file. Lì te l'ha, non c'entra niente, ma lì te l'ha salvato su cursor e o su gtab? Nessuno dei due. Ok. Sul mio computer, ma adesso ci arriviamo. Però era solo per farti capire che l'avanzamento della programmazione è modulare, è soprattutto incrementale. Cioè, noi siamo sulle spalle dei giganti, ok? Molto più che nella fisica. Sai che la fisica c'è? Qui molto di più. Perché davvero tu, cioè, nella fisica perlomeno devi studiare quello che gli altri hanno scoperto. Qui non devi neanche sapere come cazzo funziona. Cioè io non so cosa cazzo abbia fatto la macchina adesso, lo dico e lo fa. Quindi posso costruire molte più cose. Io rispetto a uno di 60 anni fa. Anche se quello di 60 anni fa è 100 volte più bravo di me. È rilevante, perché io ho molti più strumenti. Ok? Adesso andiamo a spiegare cosa è successo. Innanzitutto, cosa succede su gtab? Io salvo, per appunto, file e cartelle, no, di testo, che poi ha un suffisso, quindi sono dei dati in un file con un suffisso che insegna alla macchina come interpretare quel file. Ok? Un code editor ti apre una cartella all'interno del tuo computer. Sì. That's it. Non è che fa, quindi quando tu dici ma dov'è che lo salva? Non è che lo salva sul software lì. Quindi sta semplicemente facendoti vedere una cartella e interagire con i file di quella cartella. Ma la cartella è una cartella del computer. Sì. Capito? Cioè il tuo computer è semplicemente come interagisce con quella cartella. Quindi, prima cosa creiamo un repository e la chiamiamo Automatic Auto Flipper Anno... Sì, vai. Public? Sì. Già pensavi... Perché... Non è che ci vediamo... Ma chi ti legge? Nessuno... Cioè, niente di quello che puoi fare tu verrà mai inculato da nessuno. Ci parliamo tra una settimana. Pensate una volta che sei contattato dalla CIA e gli dici cosa stai facendo? Vogliamo assumerti come programmatore di un programma che non è proprio assumerti come programmatore. Allora, ok, cosa ho fatto? No, ho scaricato tutto questo. Adesso io ho creato un repository pubblica sul tuo keytab. Un repository è una cartella? Sì, sì. Un repository vuol dire una cartella. Ci sono sei nomini. Semplicemente è un modo più figo per dirlo. Perché è una cartella che contiene codice di base e non è una cartella che contiene le foto nulle della tua ragazza. Ok, qui, dato che ce l'ha appena chiesto, ci ha chiesto devo installare git sul tuo sul tuo computer. Che cosa è git? Gitab, uno dice. Hub, non so cosa vuol dire, ma sto git, cioè, gli piace il termine, suonava bene o c'è un motivo? No, non c'è un motivo. Non c'è un motivo. Non c'è un motivo. Non c'è un motivo. Non c'è un motivo. Non c'è un motivo. Non c'è un motivo. Non c'è un motivo. Non c'è un motivo. Scusi me che non riesco, sono non riesco a fare le cose contemporaneamente. Quindi stavo dicendo Perché git prima di hub? Comunque io ho un'idea per questa lezione. Sai cosa facciamo poi? La facciamo insieme. Quando finiamo di setup ti faccio vedere quello che mi aspetterò da te per ogni lezione che è si scarica, si trascrive, si fa summarize nei temi menzionati e poi si fa enhance tramite la maglietta perplexity e per ogni tema fai un approfondimento cioè, facciamo fare un approfondimento perplexity per spiegarlo così tu hai la lezione fatta con quello cioè quindi io in sostanza tramite questo stabilisco i temi e ti do una prima infarinatura però poi il testo il libro di testo viene generato in base all'infarinatura che già hai come se fossero tipo le pagine di un libro dopo che la lezione per intenderci quando vai a lezione all'università capito? Che figata bella idea prego un cazzo ok 700 pagine adesso chiediamo ho fatto 5 le scienze politiche in questo modo e ok quindi questo oh ok adesso possiamo tornare a parlare di git ok cos'è git? immaginati che si scrive del codice io voglio scrivere del codice per mandare automaticamente i news a una mia ragazza ho già 100 foto devo mandare ogni giorno scrivi questo codice e lo pubblichi vai fai porco dio mi sono dimenticato di mettere quella foto dove ci sono io col cazzone gigante così dici devo caricarla la carichi ok e dici però io l'ho già pubblicato adesso come faccio? dici vai lo ripubblico no? sovrascrivo poi dici forse non è una bella idea mandare la foto così magari torno alla versione prima quindi dico no io voglio tornare alla versione prima e poi c'è un tuo amico che dice ah fammi lavorare anche a me anch'io voglio mandare le foto del mio cazzo alla tua ragazza lui dice voglio anch'io lavorare a quello e quindi si collega e pubblica anche lui le sue foto la sua versione sempre su github e inizia a collaborare poi dite ok facciamo un'esplorazione io cerco di scrivo un codice che glielo manda ogni tre ore determinate frasi tu prova un'altra cosa fate due rami del del repository principale provate le due cose poi questa funziona bene questa funziona male questa viene riunita sulla versione principale questa viene buttata via questo concetto qua si chiama versionamento ed è la base di git git è un software che serve per un software sì sì un linguaggio un linguaggio che serve per versionare le versioni del tuo codice quindi della tua applicazione ti faccio vedere cosa intendo eh anzi no forse è meglio se ti faccio vedere qua lavorare e gestire più versioni dello stesso guarda qua dello stesso codice come vedi vedi che si aprono delle dei dei branch e si si si di di de di dei branch tutti i puntini sono dei i termini principali di di git sono git add commit push pull merge clone e fork di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di d di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di D Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di Di
